import json
import time
import requests
import base64
import datetime
import os
import config
from telebot import TeleBot, types
from telebot.types import InputMediaPhoto
from threading import Thread
from dotenv import load_dotenv


load_dotenv()
class Text2ImageAPI:
    def __init__(self, url, api_key, secret_key, save_directory='photos'):
        self.URL = url
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }
        self.save_directory = save_directory
        if not os.path.exists(self.save_directory):
            os.makedirs(self.save_directory)

    def get_model(self):
        response = requests.get(self.URL + 'key/api/v1/models', headers=self.AUTH_HEADERS)
        data = response.json()

        if not data or 'id' not in data[0]:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å. –û—Ç–≤–µ—Ç API: {}".format(data))

        return data[0]['id']

    def generate(self, prompt, model, images=1, width=1024, height=1024, style=2):
        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": f"{prompt}",
                "style": style
            }
        }

        data = {
            'model_id': (None, model),
            'params': (None, json.dumps(params), 'application/json')
        }
        response = requests.post(self.URL + 'key/api/v1/text2image/run', headers=self.AUTH_HEADERS, files=data)
        data = response.json()
        print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. UUID: {data['uuid']}")
        return data['uuid']

    def check_generation(self, request_id, attempts=10, delay=10):
        print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è UUID: {request_id}")
        while attempts > 0:
            response = requests.get(self.URL + 'key/api/v1/text2image/status/' + request_id, headers=self.AUTH_HEADERS)
            data = response.json()
            if not generating:
                print("[DEBUG] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                return None
            print(f"[DEBUG] –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data['status']}")
            if data['status'] == 'DONE':
                return data['images']
            attempts -= 1
            time.sleep(delay)
        print("[DEBUG] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")
        return None

    def save_image(self, base64_string, file_name):
        if base64_string.startswith('data:image/png;base64,'):
            base64_string = base64_string.split(',')[1]

        image_data = base64.b64decode(base64_string)
        full_file_path = os.path.join(self.save_directory, file_name)

        with open(full_file_path, 'wb') as image_file:
            image_file.write(image_data)
        print(f"[DEBUG] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {full_file_path}")

    def get_unique_file_name(self, base_name, extension):
        time_stamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        unique_name = f"{base_name}_{time_stamp}{extension}"

        count = 1
        while os.path.exists(os.path.join(self.save_directory, unique_name)):
            unique_name = f"{base_name}_{time_stamp}_{count}{extension}"
            count += 1

        return unique_name


TOKEN = config.BOT_TOKEN
bot = TeleBot(TOKEN)

api1 = Text2ImageAPI(url='https://api-key.fusionbrain.ai/', api_key=config.api_key, secret_key=config.secret_key)
api2 = Text2ImageAPI(url='https://api-key.fusionbrain.ai/', api_key=config.api_key2, secret_key=config.secret_key2)
api3 = Text2ImageAPI(url='https://api-key.fusionbrain.ai/', api_key=config.api_key3, secret_key=config.secret_key3)

try:
    model_id1 = api1.get_model()
    model_id2 = api2.get_model()
    model_id3 = api3.get_model()
    print(
        f"[DEBUG] –ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã. ID –º–æ–¥–µ–ª–∏ 1: {model_id1}, ID –º–æ–¥–µ–ª–∏ 2: {model_id2}, ID –º–æ–¥–µ–ª–∏ 3: {model_id3}")
except ValueError as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
    exit(1)

generating = False
current_prompt = ""
current_num_images = 0
current_style = 0
previous_user_message_id = None
previous_bot_message_id = None

style_names = {
    1: "Kandinsky",
    2: "–î–µ—Ç–∞–ª—å–Ω—ã–π",
    3: "–ê–Ω–∏–º–µ",
    4: "Default"
}


def get_time_string(minutes):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ '–º–∏–Ω—É—Ç–∞'."""
    if minutes % 10 == 1 and minutes % 100 != 11:
        return f"{minutes} –º–∏–Ω—É—Ç–∞"
    elif 2 <= minutes % 10 <= 4 and not (12 <= minutes % 100 <= 14):
        return f"{minutes} –º–∏–Ω—É—Ç—ã"
    else:
        return f"{minutes} –º–∏–Ω—É—Ç"


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "üåå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —á—É–¥–µ—Å ArtGenie! \n"
                                      "\nüîÆ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –º–∞–≥–∏–∏ –∫–æ–º–∞–Ω–¥. –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å /generate –∏ –¥–∞–π—Ç–µ –≤–æ–ª—é —Å–≤–æ–µ–º—É –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—é!\n"
                                      "\n–í–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞:\n"
                                      "\n‚ú® /generate ‚Äì –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä–∏ –≤ –º–∏—Ä –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤\n"
                                      "‚ú® /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ç–æ–∫ –∏–¥–µ–π\n"
                                      "‚ú® /help - –ø–æ–º–æ—â—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏")


@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, "\n–í–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞:\n"
                                      "\n‚ú® /generate ‚Äì –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä–∏ –≤ –º–∏—Ä –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤\n"
                                      "‚ú® /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ç–æ–∫ –∏–¥–µ–π")


@bot.message_handler(commands=['generate'])
def generate_image(message):
    global generating, previous_bot_message_id
    generating = False

    if previous_user_message_id:
        try:
            bot.delete_message(message.chat.id, previous_user_message_id)
        except Exception as e:
            print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    if previous_bot_message_id:
        try:
            bot.delete_message(message.chat.id, previous_bot_message_id)
        except Exception as e:
            print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

    bot.delete_message(message.chat.id, message.message_id)

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    previous_bot_message_id = msg.message_id


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global generating, current_prompt, previous_user_message_id, previous_bot_message_id, current_num_images, current_style
    if not generating:
        chat_id = message.chat.id
        current_prompt = message.text

        if previous_user_message_id:
            try:
                bot.delete_message(chat_id, previous_user_message_id)
            except Exception as e:
                print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        if previous_bot_message_id:
            try:
                bot.delete_message(chat_id, previous_bot_message_id)
            except Exception as e:
                print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

        previous_user_message_id = message.message_id

        bot.delete_message(chat_id, message.message_id)

        msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", reply_markup=create_image_count_keyboard())
        previous_bot_message_id = msg.message_id


def create_image_count_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text='1', callback_data='num_images_1'),
        types.InlineKeyboardButton(text='3', callback_data='num_images_3'),
        types.InlineKeyboardButton(text='5', callback_data='num_images_5'),
        types.InlineKeyboardButton(text='10', callback_data='num_images_10'),
        types.InlineKeyboardButton(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data='num_images_input'),
    ]
    keyboard.add(*buttons)
    return keyboard


@bot.callback_query_handler(func=lambda call: call.data.startswith('num_images_'))
def handle_image_count_selection(call):
    global current_num_images, previous_bot_message_id
    if call.data == 'num_images_input':

        if previous_bot_message_id:
            try:
                bot.delete_message(call.message.chat.id, previous_bot_message_id)
            except Exception as e:
                print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
        previous_bot_message_id = msg.message_id
        bot.register_next_step_handler(msg, process_image_count)
    else:
        current_num_images = int(call.data.split('_')[-1])

        bot.delete_message(call.message.chat.id, call.message.message_id)

        msg = bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                               reply_markup=create_style_keyboard())
        previous_bot_message_id = msg.message_id


def process_image_count(message):
    global current_num_images, previous_user_message_id, previous_bot_message_id
    try:
        current_num_images = int(message.text)
        if current_num_images <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")

        if previous_user_message_id:
            try:
                bot.delete_message(message.chat.id, previous_user_message_id)
            except Exception as e:
                print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        bot.delete_message(message.chat.id, message.message_id)

        if previous_bot_message_id:
            try:
                bot.delete_message(message.chat.id, previous_bot_message_id)
            except Exception as e:
                print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=create_style_keyboard())
        previous_bot_message_id = msg.message_id
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, process_image_count)


def create_style_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text='Kandinsky', callback_data='style_1'),
        types.InlineKeyboardButton(text='–î–µ—Ç–∞–ª—å–Ω—ã–π', callback_data='style_2'),
        types.InlineKeyboardButton(text='–ê–Ω–∏–º–µ', callback_data='style_3'),
        types.InlineKeyboardButton(text='Default', callback_data='style_4'),
    ]
    keyboard.add(*buttons)
    return keyboard


@bot.callback_query_handler(func=lambda call: call.data.startswith('style_'))
def handle_style_selection(call):
    global current_style, generating
    current_style = int(call.data.split('_')[-1])

    if current_num_images <= 3:
        estimated_time = 1
    elif current_num_images <= 6:
        estimated_time = 2
    elif current_num_images <= 9:
        estimated_time = 3
    elif current_num_images <= 12:
        estimated_time = 4
    else:

        estimated_time = 4 + (current_num_images - 12 + 2) // 3

    time_string = get_time_string(estimated_time)

    stop_button = types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é', callback_data='stop_generation')
    keyboard = types.InlineKeyboardMarkup().add(stop_button)

    bot.delete_message(call.message.chat.id, call.message.message_id)

    style_name = style_names[current_style]

    final_message = (f"–ü—Ä–æ–º–ø—Ç: '{current_prompt}', "
                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: '{current_num_images}', "
                     f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å: '{style_name}'. "
                     f"–û–∂–∏–¥–∞–π—Ç–µ, –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {time_string}.")

    confirmation_msg = bot.send_message(call.message.chat.id, final_message, reply_markup=keyboard)
    previous_bot_message_id = confirmation_msg.message_id

    generating = True
    image_files = []

    print("[DEBUG] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

    def generate_with_api(api, model_id, num_images):
        if num_images > 0:
            print(f"[DEBUG] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å API: {api.AUTH_HEADERS['X-Key']}")
            for i in range(num_images):
                if not generating:
                    print("[DEBUG] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                    return

                try:
                    uuid = api.generate(current_prompt, model_id, images=1, style=current_style)
                    images = api.check_generation(uuid)
                except requests.exceptions.ReadTimeout:
                    if generating:
                        bot.send_message(call.message.chat.id,
                                         "–ó–∞–ø—Ä–æ—Å –∫ API –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Ç–∞–π–º–∞—É—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return
                except Exception as e:
                    if generating:
                        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                    return

                if images:
                    for j, img in enumerate(images):
                        if not generating:
                            print("[DEBUG] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                            return
                        file_name = api.get_unique_file_name('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '.png')
                        api.save_image(img, file_name)
                        image_files.append(os.path.join(api.save_directory, file_name))
                else:
                    if generating:
                        print("[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    return

    num_images_api1 = current_num_images // 3
    num_images_api2 = (current_num_images - num_images_api1) // 2
    num_images_api3 = current_num_images - num_images_api1 - num_images_api2

    if current_num_images > 2:
        thread1 = Thread(target=generate_with_api, args=(api1, model_id1, num_images_api1))
        thread2 = Thread(target=generate_with_api, args=(api2, model_id2, num_images_api2))
        thread3 = Thread(target=generate_with_api, args=(api3, model_id3, num_images_api3))

        thread1.start()
        thread2.start()
        thread3.start()

        thread1.join()
        thread2.join()
        thread3.join()
    else:

        if current_num_images == 1:
            generate_with_api(api1, model_id1, 1)
        else:
            generate_with_api(api1, model_id1, 1)
            generate_with_api(api2, model_id2, 1)

    if not image_files:
        bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    for i in range(0, len(image_files), 10):
        media = []
        for file_path in image_files[i:i + 10]:
            media.append(InputMediaPhoto(open(file_path, 'rb')))

        try:
            media_group_msg = bot.send_media_group(call.message.chat.id, media)
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
            return

    buttons = [
        types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='restart'),
    ]
    keyboard = types.InlineKeyboardMarkup().add(*buttons)
    bot.send_message(call.message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'restart')
def restart_generation(call):
    generate_image(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'stop_generation')
def stop_generation_callback(call):
    global generating
    generating = False
    bot.send_message(call.message.chat.id, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


if __name__ == '__main__':
    bot.polling(skip_pending=True, timeout=30)