import json
import time
import requests
import base64
import datetime
import os
import config
from telebot import TeleBot
from telebot.types import InputMediaPhoto


# –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
class Text2ImageAPI:
    def __init__(self, url, api_key, secret_key, save_directory='photos'):
        self.URL = url
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }
        self.save_directory = save_directory
        if not os.path.exists(self.save_directory):
            os.makedirs(self.save_directory)

    def get_model(self):
        response = requests.get(self.URL + 'key/api/v1/models', headers=self.AUTH_HEADERS)
        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not data or 'id' not in data[0]:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å. –û—Ç–≤–µ—Ç API: {}".format(data))

        return data[0]['id']

    def generate(self, prompt, model, images=1, width=1024, height=1024, style=2):
        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": f"{prompt}",
                "style": style
            }
        }

        data = {
            'model_id': (None, model),
            'params': (None, json.dumps(params), 'application/json')
        }
        response = requests.post(self.URL + 'key/api/v1/text2image/run', headers=self.AUTH_HEADERS, files=data)
        data = response.json()
        print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. UUID: {data['uuid']}")
        return data['uuid']

    def check_generation(self, request_id, attempts=10, delay=10):
        print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è UUID: {request_id}")
        while attempts > 0:
            response = requests.get(self.URL + 'key/api/v1/text2image/status/' + request_id, headers=self.AUTH_HEADERS)
            data = response.json()
            print(f"[DEBUG] –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data['status']}")
            if data['status'] == 'DONE':
                return data['images']
            attempts -= 1
            time.sleep(delay)
        print("[DEBUG] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")
        return None

    def save_image(self, base64_string, file_name):
        if base64_string.startswith('data:image/png;base64,'):
            base64_string = base64_string.split(',')[1]

        image_data = base64.b64decode(base64_string)
        full_file_path = os.path.join(self.save_directory, file_name)

        with open(full_file_path, 'wb') as image_file:
            image_file.write(image_data)
        print(f"[DEBUG] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {full_file_path}")

    def get_unique_file_name(self, base_name, extension):
        time_stamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        unique_name = f"{base_name}_{time_stamp}{extension}"

        count = 1
        while os.path.exists(os.path.join(self.save_directory, unique_name)):
            unique_name = f"{base_name}_{time_stamp}_{count}{extension}"
            count += 1

        return unique_name


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞
TOKEN = config.BOT_TOKEN
bot = TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
api = Text2ImageAPI(url='https://api-key.fusionbrain.ai/', api_key=config.api_key, secret_key=config.secret_key)

try:
    model_id = api.get_model()
    print(f"[DEBUG] –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞. ID –º–æ–¥–µ–ª–∏: {model_id}")
except ValueError as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
    exit(1)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
generating = False
current_prompt = ""
current_num_images = 0
current_style = 0


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "üåå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —á—É–¥–µ—Å ArtGenie! \n"
                                       "\nüîÆ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –º–∞–≥–∏–∏ –∫–æ–º–∞–Ω–¥. –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å /generate –∏ –¥–∞–π—Ç–µ –≤–æ–ª—é —Å–≤–æ–µ–º—É –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—é!\n"
                                       "\n–í–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞:\n"
                                       "\n‚ú® /generate ‚Äì –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä–∏ –≤ –º–∏—Ä –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤\n"
                                       "‚ú® /retry ‚Äì –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏ —Å–æ–∑–¥–∞–π—Ç–µ —à–µ–¥–µ–≤—Ä\n"
                                       "‚ú® /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ç–æ–∫ –∏–¥–µ–π\n"
                                       "‚ú® /help - –ø–æ–º–æ—â—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏")


@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, "\n–í–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞:\n"
                                       "\n‚ú® /generate ‚Äì –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä–∏ –≤ –º–∏—Ä –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤\n"
                                       "‚ú® /retry ‚Äì –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏ —Å–æ–∑–¥–∞–π—Ç–µ —à–µ–¥–µ–≤—Ä\n"
                                       "‚ú® /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ç–æ–∫ –∏–¥–µ–π")


@bot.message_handler(commands=['generate'])
def generate_image(message):
    global generating
    generating = False
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")


@bot.message_handler(commands=['retry'])
def retry_message(message):
    global generating
    if generating:
        bot.send_message(message.chat.id, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∏–¥–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
    else:
        generating = False
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")


@bot.message_handler(commands=['stop'])
def stop_generation(message):
    global generating
    generating = False
    bot.send_message(message.chat.id, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π /generate.")


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global generating, current_prompt
    if not generating:
        chat_id = message.chat.id
        current_prompt = message.text
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (1-10):")
        bot.register_next_step_handler(message, process_num_images, current_prompt)  # –ü–µ—Ä–µ–¥–∞–µ–º prompt


def process_num_images(message, prompt):
    global generating, current_num_images
    chat_id = message.chat.id
    if message.text.startswith('/'):
        return  # –ò–≥–Ω–æ—Ä –∫–æ–º–∞–Ω–¥

    try:
        current_num_images = int(message.text)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-4): \n 1 - kandinsky \n 2 - –¥–µ—Ç–∞–ª—å–Ω—ã–π \n 3 - –∞–Ω–∏–º–µ \n 4 - default")
        bot.register_next_step_handler(message, process_style, prompt)  # –ü–µ—Ä–µ–¥–∞–µ–º prompt
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, process_num_images, prompt)  # –ü–µ—Ä–µ–¥–∞–µ–º prompt


def process_style(message, prompt):
    global generating, current_style
    chat_id = message.chat.id
    if message.text.startswith('/'):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–≤–µ–¥–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ —Å—Ç–∏–ª—è

    try:
        current_style = int(message.text)
        if current_style < 1 or current_style > 4:
            raise ValueError("–°—Ç–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4.")

        # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        estimated_time = current_num_images * 1  # 1 –º–∏–Ω—É—Ç–∞ –∑–∞ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        bot.send_message(chat_id, f"–û–∂–∏–¥–∞–π—Ç–µ, –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {estimated_time} –º–∏–Ω—É—Ç.")

        generating = True
        image_files = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for i in range(current_num_images):
            if not generating:
                bot.send_message(chat_id, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                return

            try:
                uuid = api.generate(prompt, model_id, images=1, style=current_style)
                images = api.check_generation(uuid)
            except requests.exceptions.ReadTimeout:
                bot.send_message(chat_id, "–ó–∞–ø—Ä–æ—Å –∫ API –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Ç–∞–π–º–∞—É—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            except Exception as e:
                bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                return

            if images:
                for j, img in enumerate(images):
                    file_name = api.get_unique_file_name('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '.png')
                    api.save_image(img, file_name)
                    image_files.append(os.path.join(api.save_directory, file_name))
            else:
                bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–∞—Ä—Ç–∏—è–º–∏ –ø–æ 10
        for i in range(0, len(image_files), 10):
            media = []
            for file_path in image_files[i:i + 10]:
                media.append(InputMediaPhoto(open(file_path, 'rb')))

            try:
                bot.send_media_group(chat_id, media)
            except Exception as e:
                bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
                return

    except ValueError as e:
        bot.send_message(chat_id, str(e))
        bot.register_next_step_handler(message, process_style, prompt)  # –ü–µ—Ä–µ–¥–∞–µ–º prompt


if __name__ == '__main__':
    bot.polling(skip_pending=True, timeout=30)